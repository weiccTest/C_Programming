一、字符串字面量
	字符串字面量(string literal) 是用一对双引号括起来的字符序列。

二、延续字符串字面量
	如果发现字符串字面量太长而无法放置在单独一行以内，只要把第一行用字符\结尾。
	例如：printf("When you com to a fork in the road, take it. \
			-- Yogi Berra")
			
三、如何存储字符串字面量
	C语言把字符串字面量作为字符数组来处理。
	当C语言编译器在程序中遇到长度为n的字符串字面量时，它会为字符串字面量分配长度为n+1的内存空间
	这块内存空间将用来存储字符串字面量中的字符，以及一个用来标志字符串末尾的额外字符(空字符)。
	空字符是一个所有位都为0的字节，应此转义序列为\0。
	
四、字符串字面量的操作
	c语言允许使用char *指针的地方使用字符串字面量。
	例如, char *p;
		p  = "abc"; //这个赋值不是复制abc中的字符，而是使p指向字符串中的第一个字符
	c语言允许对指针取下标，因此可以对字符串字面量取下标：
	char ch;
	ch = "abc"[1]; //ch的新值将是字母b；
	
	woring：试图改变字符串字面量会导致未定义的行为；

五、字符串字面量与字符常量
	只包含一个字符的字符串字面量不同于字符常量。
	字符串字面量"a"是用指针来表示的，这个指针存放字符"a"(后面紧跟着空字符\0)的内存单元格。
	字符常量'a'是用整数(ASCLL)来表示的。
	
六、初始化字符串变量
	char date1[8] = "June 14";
	编译器将把字符串“June 14”中的字符复制到date1中去，然后在追加一个空字符从而使data1可以作为字符串使用。
	当数组的初始化比数组本身短时，剩下的数组元素被初始化为0
	
七、字符串数组与字符指针
	char date[] = "June 14";
	char *date = "June 14";
	前者声明date是一个数组，后者声明date是一个指针。
	两者之前的差异：
		1、在声明数组时，就像任意数组元素一样，可以修改存储在date中的字符。在声明为指针时，date指向的字符串字面量。字符串字面量是不可以修改的
		2、在声明为数组时，date是数组名。在声明为指针时，date是变量，这个变量可以在程序执行期间指向其他的字符。
	
八、用printf函数和puts函数写字符串
	char str[] = "Are we having fun yet?";
	printf("%s\n",str); //Are we having fun yet?
	printf("%.6s\n",str); //Are we   %.ps:这里的p表示要显示的字符数量
	printf("%2.6s\n",str); //Are we   %m.ps 会使字符串的前p个字符在大小为m的字段内显示(对于超过m个字符的字符串，printf函数会显示出整个字符串，而不会截断)
	
	puts函数只有一个参数，即需要显示的字符串。
	
九、scanf函数和gets函数
	scanf函数读入字符永远不会包含空白字符。因此，scanf函数通常不会读入一整行输入。换行符会使scanf函数停止读入，空格符或者是制表符也会产生相同的结果。为了一次读入一整行输入，可以是用puts函数。gets函数把读入字符放到数组中，然后存储一个空字符。
	scanf和puts的不同之处：
		1、gets函数不会在开始读字符串之前跳过空白符，scanf函数会跳过
		2、gets函数会持续读入直到找到换行符才停止(scanf函数会在任意空白符处停止)。此外，gets函数会忽略掉换行符。
			
